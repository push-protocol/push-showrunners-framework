steps:
# Step 1: Build the Docker Image and push to Artifact Registry
- name: 'google/cloud-sdk'
  entrypoint: 'bash'
  args:
    - '-c'
    - | 
      #!/bin/bash
      gcloud container clusters get-credentials gke-s-services-base-usce1 --region us-central1 --project push-stage-apps
      export DEP_EXIST=$(kubectl get deployment -n apps | grep push-showrunners)
      if [[ -z "$${DEP_EXIST// /}" ]]
      then
        echo "‚ùå Deployment for showrunners has not been created, image will not be created. Please commit to push-showrunners-channels repository first!"
      else
        echo "‚úîÔ∏è Creating image..."
        touch COMM_DEP_EXIST.txt && echo "present" >  COMM_DEP_EXIST.txt
        
        mkdir /repo && cd /repo
        git clone https://github.com/push-protocol/push-showrunners-framework.git && cd push-showrunners-framework/
        git checkout  gke-cicd-stage-showrunners-framework
        CHANGE_PKG_EXIST=$(git diff-tree --no-commit-id --name-only -r $SHORT_SHA | grep package.json )
        if [[ -z "$${CHANGE_PKG_EXIST// /}" ]]
        then
          echo "There is no change in package.json"
          cd /workspace
          cp .env.sample .env
          while true
          do
            export POD_NAME=$(kubectl get pods -n apps |  grep push-showrunners | grep Running |  awk '{print $1}' )
            if [[ -z "$${POD_NAME// /}" ]]; then
                echo "‚ùåPOD_ABSENT, waiting for pod to come in running state‚åõ"
            else
                echo "‚úÖPOD is present, proceeding further"
                cd / 
                kubectl exec $$POD_NAME -n apps  -- tar cf - "/epns-showrunners-frameworks/node_modules" | tar xf -
                break
            fi
          done
          echo $${POD_NAME}
          cd /workspace
          cp .env.sample .env
          docker build -t us-central1-docker.pkg.dev/push-stage-apps/ar-s-services-base-usce1/push-showrunners-image:$SHORT_SHA Dockerfile_no_install
          docker push us-central1-docker.pkg.dev/push-stage-apps/ar-s-services-base-usce1/push-showrunners-image:$SHORT_SHA
        else
          echo "‚ö†Ô∏è There is change in package.json"
          cd /workspace
          cp .env.sample .env
          #docker build -t us-central1-docker.pkg.dev/push-stage-apps/ar-s-services-base-usce1/push-showrunners-image:$SHORT_SHA Dockerfile
          #docker push us-central1-docker.pkg.dev/push-stage-apps/ar-s-services-base-usce1/push-showrunners-image:$SHORT_SHA
        fi
        
      fi

# Step 2: Create the Cloud Deploy Pipeline and release
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
    - '-c'
    - | 
      #!/bin/bash
      gcloud container clusters get-credentials gke-s-services-base-usce1 --region us-central1 --project push-stage-apps
      export COMM_DEP_EXIST="$$(<COMM_DEP_EXIST.txt)"
      echo "üü£value of COMM_DEP_EXIST"
      echo $${COMM_DEP_EXIST}
      if [[ -z "$${COMM_DEP_EXIST// /}" ]]
      then
        echo "‚ùå Deployment for showrunners has not been created, this trigger will be stopped. Please commit to push-showrunners-channels repository first!"
      else
        echo "‚úîÔ∏è Deployment exists, proceeding further..."
        # ‚û°Ô∏è WHILE LOOP
        while true
        do
          export BUILD_EXIST=$(gcloud builds list --region us-central1  --filter "tags=showrunners AND (status=QUEUED OR status=WORKING)")
          if [[ -z "$${BUILD_EXIST// /}" ]]
          then
            echo "‚úîÔ∏è No current build running on push-showrunners-channels repository, proceeding further..."
            break
          else
            echo "‚åõ Waiting for the ongoing build to complete on push-showrunners-channels repository"
          fi
        done
        # ‚û°Ô∏è WHILE LOOP END
        export DEP_EXIST=$(kubectl get deployment -n apps | grep push-showrunners)
        if [[ -z "$${DEP_EXIST// /}" ]]
        then
          echo "‚ùå Deployment for showrunners has not been created, this trigger will be stopped. Please commit to push-showrunners-channels repository first!"
        else
          echo "‚úîÔ∏è Updating Deployment..."
          #kubectl set image deployment push-showrunners push-showrunners=us-central1-docker.pkg.dev/push-stage-apps/ar-s-services-base-usce1/push-showrunners-image:$SHORT_SHA -n=apps
          echo "‚úÖ Updated Deployment..."
        fi
      fi   
options:
 logging: CLOUD_LOGGING_ONLY
 workerPool: 'projects/push-stage-apps/locations/us-central1/workerPools/worker-pool-s-services-base-usce1'
